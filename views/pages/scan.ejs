<!-- views/profile.ejs -->
<%- include('../partials/header') %>
<%- include('../partials/scan-header') %>
<form id="dataForm" data-project-id="<%= project ? project._id : '' %>">
</form>

<%- include('../partials/scan-footer') %>

<script>

let form = {};
let schema = {};
let projectData = {};
let projectId = "";

$('#dataForm').html("");
$('#result').html("");
$('form').show();

document.addEventListener("DOMContentLoaded", function () {

    // Get the project ID
    const form = document.getElementById("dataForm");
    projectId = form.dataset.projectId;

    // Get the form name from the URL
    const urlParts = window.location.pathname.split('/');
    const formName = urlParts.length >= 4 && urlParts[3] !== undefined ? urlParts[3] : 'projectDetails';

    // load the data
    loadPage(formName,projectId);
});

async function loadPage(formName,projectId) {
    projectData = await loadProject(projectId);
    await populateBlankArrays();
    await loadFormComponents(formName);
    await renderForm(projectData);
    extractDisabledFieldValues("dataForm");
    loadAI();
    moveSubmitButton();
}

async function reloadPage() {
    await renderForm(projectData);
    extractDisabledFieldValues("dataForm");
    await loadAI();
    moveSubmitButton();
}

async function populateBlankArrays() {
    try {
        // Fetch the project schema
        const response = await fetch('/data/schemas/project.json');
        const schema = await response.json();
        const properties = schema.properties;

        // Iterate over each property in the schema
        Object.keys(properties).forEach(propertyName => {
            const property = properties[propertyName];
            // Check if the property is an array
            if (property.type === 'array') {
                // Check if the property is not already defined in projectData
                if (projectData[propertyName].length < 1) {

                    // If the array items are objects with properties defined, populate with blank objects
                    if (property.items && property.items.type === 'object' && property.items.properties) {
                        const blankObject = {};
                        // Populate the blank object with blank properties based on schema
                        Object.keys(property.items.properties).forEach(prop => {
                            blankObject[prop] = '';
                        });
                        projectData[propertyName].push(blankObject);
                    }
                }
            }
        });
    } catch (error) {
        console.error('Error fetching or processing schema:', error);
    }
}

async function updatePageTitle(pageLink) {
    const pages = [
        {
            "link": "projectDetails",
            "title": "Project details"
        },
        {
            "link": "intendedConsequences",
            "title": "Intended consequences"
        },
        {
            "link": "unintendedConsequences",
            "title": "Unintended consequences"
        },
        {
            "link": "riskEvaluation",
            "title": "Risk evaluation"
        },
        {
            "link": "stakeholders",
            "title": "Stakeholders"
        },
        {
            "link": "actionPlanning",
            "title": "Action planning"
        }
    ]
    // Find the corresponding page object
    const page = pages.find(item => item.link === pageLink);
    document.getElementById("pageId").value = page.link;

    // Update the page title within the HTML
    const pageTitleElement = document.querySelector('.page-title h1');
    if (pageTitleElement && page) {
        pageTitleElement.textContent = page.title;
    }

    // Update the HTML <title> attribute
    if (page) {
        document.title = page.title;
    }

}

async function quickNav(page) {
    // Update the URL without reloading the page
    history.pushState({}, '', `/project/${projectId}/${page}`);

    // Update the selected state of sidebar items
    const sidebarLinks = document.querySelectorAll('.project-menu li a');
    sidebarLinks.forEach(link => {
        if (link.getAttribute('id') === `${page}`) {
            link.classList.add('selected');
        } else {
            link.classList.remove('selected');
        }
    });

    // Load form components
    await loadFormComponents(page);

    await updatePageTitle(page);

    // Reload the page if necessary
    reloadPage(); // Assuming this function is needed for other purposes
}

async function renderForm(data) {
    document.getElementById('dataForm').innerHTML = "";
    try {
        // Fetch the schema from "schemas/project.json"

        $('#dataForm').jsonForm({
            schema: schema,
            form: form,
            value: populateMissingElements(schema, data),
            onSubmit: function (errors, values) {
                values = populateMissingElements(schema, values);
                if (errors) {
                    console.log(errors);
                    showErrorOverlay('<p>Please correct the errors in your form</p>');
                } else {
                    for (const key in values) {
                        data[key] = values[key];
                    }
                    sendDataToServer(data);
                }
            }
        });
    } catch (error) {
        console.error("Error rendering form:", error);
    }
}

async function loadFormComponents(formName) {
    const schemaResponse = await fetch(`/schemas/partials/${formName}.json`);
    const fullSchema = await schemaResponse.json();
    schema = fullSchema.properties;

    // Fetch the form from the corresponding JSON file
    const formResponse = await fetch(`/data/forms/${formName}.json`);
    form = await formResponse.json();
}

function populateMissingElements(schema,data) {
    for (const key in schema) {
        if (!(key in data) && key !== "_id") {
            if (schema[key].type === "array") {
                // Initialize missing array elements as empty arrays
                data[key] = [];
            } else {
                // Initialize missing elements as empty strings
                data[key] = "";
            }
        }
    }
    return data;
}

function moveSubmitButton() {
    const submitButtonContainer = document.createElement('div');
    submitButtonContainer.setAttribute('id', 'submitButtonContainer'); // Add quotes around the attribute name
    submitButtonContainer.classList.add('content-block', 'white', 'proceed'); // Separate class names with commas

    const submitButton = document.querySelector('.submitButton'); // Use vanilla JavaScript to select the submit button

    if (submitButtonContainer && submitButton) { // Check if both elements exist
        submitButtonContainer.appendChild(submitButton); // Use appendChild() to append the submit button
        document.getElementById('dataForm').appendChild(submitButtonContainer); // Move container inside #dataForm
    } else {
        console.error("submitButtonContainer or submitButton not found.");
    }
}

async function sendDataToServer(inputObject) {
  console.log(inputObject);
  let url;
  let method;
  const form = document.getElementById("dataForm");
  var projectId = form.dataset.projectId;

  if (projectId) {
    // If _id is set, use PUT to update existing data
    url = `/project/${projectId}`;
    method = "PUT";
  } else {
    // If _id is not set, use POST to create new data
    url = `/project/`;
    method = "POST";
  }

  try {
    const response = await fetch(url, {
      method,
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(inputObject),
    });

    if (response.ok) {
      // Request was successful, parse the response to get the ID
      if (method == "POST") {
        const responseData = await response.json();
        projectId = responseData._id; // Replace with the actual field name from the response
      }
      const nextAttributeValue = $('.submitButton').attr('next');
      const quickNavAttributeValue = $('.submitButton').attr('quickNav');

      if (quickNavAttributeValue === "true" && nextAttributeValue) {
        quickNav(nextAttributeValue);
      } else if (projectId && nextAttributeValue) {
        window.location.href = `/project/${projectId}/${nextAttributeValue}`;
      } else {
        window.location.href = `/project/${projectId}/`;
      }
    } else {
        // Request failed, handle errors
        const errorData = await response.json();
        const errorMessage = errorData.message;
        showErrorOverlay(errorMessage);
    }
  } catch (error) {
    // Handle network errors
    const errorMessage = "An error occurred. Please try again later.";
    showErrorOverlay(errorMessage);
  }
}

function showErrorOverlay(errorMessage) {
    // Populate the error message in the overlay
    document.getElementById("error-content-inner").innerHTML = "<p>" + errorMessage + "</p>";

    // Show the error overlay
    document.getElementById("error-overlay").style.display = 'block';
}

function closeErrorOverlay() {
    // Hide the error overlay
    document.getElementById("error-overlay").style.display = 'none';
}

function extractDisabledFieldValues(formId) {
    const form = document.getElementById(formId);

    if (!form) {
        console.error('Form not found.');
        return;
    }

    const disabledFields = form.querySelectorAll('input.disabled, select.disabled, textarea.disabled');

    if (disabledFields.length === 0) {
        return;
    }

    disabledFields.forEach(field => {
        const fieldValue = field.value;

        // Hide the original field
        field.style.display = 'none';

        // Create a new paragraph element to display the field value
        const paragraphElement = document.createElement('p');
        paragraphElement.textContent = fieldValue;

        // Insert the new paragraph element after the original field
        field.parentNode.insertBefore(paragraphElement, field.nextSibling);
    });
}


</script>
<%- include('../partials/footer') %>