<%- include('../partials/header') %>
<%- include('../partials/scan-header') %>
<script src="/js/dashboard.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<form id="dataForm" data-project-id="<%= project ? project._id : '' %>">
</form>
<section class="content-block white result">
    <h1 id="title"></h1>
    <h2>Objectives</h2>
    <p id="objectives"></p>
    <h2>Data used</h2>
    <p id="dataUsed"></p>
    <h2>Stakeholders</h2>
    <ul id="stakeholdersList">
    </ul>
    <h2>Intended conseuqneces</h2>
    <ul id="intendedConsequencesList">
    </ul>
    <h2>Positive Unintended conseuqneces</h2>
    <ul id="positiveUnintendedConsequencesList">
    </ul>
    <h2>Risk dashboard</h2>
    <section class="dashboard">
        <subsection class="dashboard-box">
            <div class="dashboard-header">
                <h2>Risks</h2>
            </div>
            <div class="dashboard-chart">
                <canvas id="riskChart" width="200" height="100"></canvas> <!-- Add canvas for the donut chart -->
            </div>
        </subsection>
        <subsection class="dashboard-box">
            <div class="dashboard-header">
                <h2>Stats <span class="small">(average)</span></h2>
            </div>
            <div class="dashboard-chart">
                <h3>Likelihood</h3>
                <div class="progress-bar">
                    <div id="likelihood-bar" class="bar"></div>
                </div>
                <h3>Impact</h3>
                <div class="progress-bar">
                    <div id="impact-bar" class="bar"></div>
                </div>
                <h3>Risk</h3>
                <div class="progress-bar">
                    <div id="risk-bar" class="bar"></div>
                </div>
            </div>
        </subsection>
        <subsection class="dashboard-box top-risks">
            <div class="dashboard-header">
                <h2>Priority <span class="small">(top 5)</span></h2>
            </div>
            <div class="dashboard-chart">
                <table id="topRisksTable">
                    <thead>
                        <tr>
                            <th>Risk</th>
                            <th style="width: 60px;">Level</th>
                            <th style="width: 50px;">Action</th>
                        </tr>
                    </thead>
                    <tbody id="topRisksTableBody">
                        <!-- Table rows will be dynamically added here -->
                    </tbody>
                </table>
            </div>
        </subsection>
    </section>
    <h2>Risk management table</h2>
    <table id="unintendedConsequences">
        <thead>
            <th width="21%">Consequence</th>
            <th width="6%">Risk category</th>
            <th width="6%">Likelihood</th>
            <th width="6%">Impact</th>
            <th width="6%">Role</th>
            <th width="21%">Action</th>
            <th width="6%">Timescale</th>
            <th width="6%">Assignee</th>
            <th width="21%">KPI</th>
        </thead>
        <tbody id="unintendedConsequencesBody">
        </tbody>
    </table>
</section>
<div id="submitButtonContainer" class="content-block white proceed">
    <button id="downloadButton" class="btn btn-primary submitButton">Download Project Data</button>
    <button id="downloadCSVButton" class="btn btn-primary submitButton">Download Risk Assessment (csv)</button>
    <button id="downloadDOCXButton" class="btn btn-primary submitButton">Download Project Report (docx)</button>
</div>
<%- include('../partials/scan-footer') %>
<script>

    let projectData = {};
    let projectId = "";

    document.addEventListener("DOMContentLoaded", function () {

        // Get the project ID
        const form = document.getElementById("dataForm");
        projectId = form.dataset.projectId;

        // load the data
        loadPage(projectId);
        addButtonListeners(projectId);
    });

    function addButtonListeners(projectId) {
        document.getElementById("downloadButton").addEventListener("click", async () => {
            try {
                const response = await fetch(`/project/${projectId}`, {
                    headers: {
                        "Accept": "application/json"
                    }
                });
                const jsonData = await response.json();
                const jsonBlob = new Blob([JSON.stringify(jsonData,null,2)], { type: "application/json" });
                const url = URL.createObjectURL(jsonBlob);

                const link = document.createElement("a");
                link.href = url;
                link.download = projectData.title.replace(/\s+/g, "_").trim() + ".json";
                link.click();

                // Cleanup
                URL.revokeObjectURL(url);
            } catch (error) {
                console.error("Error downloading project data:", error);
            }
        });
        document.getElementById("downloadCSVButton").addEventListener("click", async () => {
            try {
                const response = await fetch(`/project/${projectId}`, {
                    headers: {
                        "Accept": "text/csv"
                    }
                });

                const csvData = await response.text();
                const csvBlob = new Blob([csvData], { type: "text/csv" });
                const url = URL.createObjectURL(csvBlob);

                const link = document.createElement("a");
                link.href = url;
                link.download = projectData.title.replace(/\s+/g, "_").trim() + ".csv";
                link.click();

                // Cleanup
                URL.revokeObjectURL(url);
            } catch (error) {
                console.error("Error downloading CSV data:", error);
            }
        });
        document.getElementById("downloadDOCXButton").addEventListener("click", async () => {
            try {
                // Show an alert to inform users about updating the table of contents
                alert("Once the document has downloaded, you will need to update the table of contents to correct page numbering and titles.");

                // Fetch the document
                const response = await fetch(`/project/${projectId}`, {
                    headers: {
                        "Accept": "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                    }
                });

                const blob = await response.blob(); // Get the response as a Blob
                const url = URL.createObjectURL(blob);

                const link = document.createElement("a");
                link.href = url;
                link.download = projectData.title.replace(/\s+/g, "_").trim() + ".docx";
                document.body.appendChild(link); // Append the link to the document body
                link.click();
                document.body.removeChild(link); // Remove the link from the document body after clicking

                // Cleanup
                URL.revokeObjectURL(url);
            } catch (error) {
                console.error("Error downloading DOCX data:", error);
            }
        });
    }

    async function loadPage(projectId) {
        projectData = await loadProject(projectId);
        projectData = await addRiskScoreToProject(projectData);

        // Populate the page with project title, objectives, data used, intended consequences, and unintended consequences
        document.getElementById("title").textContent = projectData.title;
        document.getElementById("objectives").textContent = projectData.objectives || "No objectives provided.";
        document.getElementById("dataUsed").textContent = projectData.dataUsed || "No data used provided.";

        // Populate stakeholders
        const stakeholdersList = document.getElementById("stakeholdersList");
        if (projectData.stakeholders && projectData.stakeholders.length > 0) {
            projectData.stakeholders.forEach(stakeholder => {
                const listItem = document.createElement("li");
                listItem.textContent = stakeholder.stakeholder;
                stakeholdersList.appendChild(listItem);
            });
        } else {
            stakeholdersList.innerHTML = "<li>No stakeholders provided.</li>";
        }

        // Populate intended consequences
        const intendedConsequencesList = document.getElementById("intendedConsequencesList");
        if (projectData.intendedConsequences && projectData.intendedConsequences.length > 0) {
            projectData.intendedConsequences.forEach(consequence => {
                const listItem = document.createElement("li");
                listItem.textContent = consequence.consequence;
                intendedConsequencesList.appendChild(listItem);
            });
        } else {
            intendedConsequencesList.innerHTML = "<li>No intended consequences provided.</li>";
        }

        // Populate unintended consequences in risk management table
        const unintendedConsequencesBody = document.getElementById("unintendedConsequencesBody");
        if (projectData.unintendedConsequences && projectData.unintendedConsequences.length > 0) {
            const unintended = projectData.unintendedConsequences || [];
            unintended.forEach(consequence => {
                if (consequence.outcome === "Positive") {
                    const item = document.createElement("li");
                    item.textContent = consequence.consequence;
                    positiveUnintendedConsequencesList.appendChild(item);
                } else {
                    // Add only negative/neutral ones to the risk table
                    const row = document.createElement("tr");
                    row.innerHTML = `
                        <td>${consequence.consequence}</td>
                        <td>${getScoreText(consequence.riskScore / 3)}</td>
                        <td>${consequence.likelihood}</td>
                        <td>${consequence.impact}</td>
                        <td>${consequence.role}</td>
                        <td>${consequence.action?.description || ""}</td>
                        <td>${consequence.action?.date || ""}</td>
                        <td>${consequence.action?.stakeholder || ""}</td>
                        <td>${consequence.action?.KPI || ""}</td>
                    `;
                    unintendedConsequencesBody.appendChild(row);
                }
            });
        } else {
            unintendedConsequencesBody.innerHTML = "<tr><td colspan='9'>No unintended consequences provided.</td></tr>";
        }
        fetchURL = `/project/${projectId}/riskSummary`;
        const metrics = await fetch(fetchURL).then(response => response.json());
        addRiskDonut(metrics.riskCounts);
        addAverages(metrics.averages);
        addTopRisks(metrics.topRisks);
    }

    // Function to determine risk category based on likelihood and impact
    function getRiskCategory(score) {
        if (likelihood === "High" && impact === "High") {
            return "High";
        } else if ((likelihood === "High" && impact === "Medium") || (likelihood === "Medium" && impact === "High")) {
            return "Medium";
        } else {
            return "Low";
        }
    }
</script>
<%- include('../partials/footer') %>
